name: "VALIDATE"

env:
  INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
  MNEMONIC: ${{ secrets.MNEMONIC }}
  POLYGON_PK: ${{ secrets.POLYGON_PK }}
  GOERLI_PK: ${{ secrets.GOERLI_PK }}
  ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
  POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
  ARBISCAN_API_KEY: ${{ secrets.ARBISCAN_API_KEY }}
  OPTIMISM_API_KEY: '6IT5B9GETPQYIWNCKMMKQY25WZ133CF62F'
  SENDER_PK: ${{ secrets.SENDER_PK }}
  VERIFIER_PK: ${{ secrets.VERIFIER_PK }}
  RECIPIENT_PK: ${{ secrets.RECIPIENT_PK }}
  UNFUNDED_SIGNER_PK: ${{ secrets.UNFUNDED_SIGNER_PK }}

  CONTEXT: github

on:
  workflow_dispatch:
    inputs:
      testnet:
        description: 'choose chain environment (livenet not supported yet)'
        required: true
        default: 'testnet'
        type: choice
        options:
        - testnet
        - livenet
      amount:
        description: 'The amount to be sent'
        default: 1.0
        required: true
        type: number
      environment:
        description: 'The config file to use'
        required: true
        default: 'prod' 
        type: choice
        options:
        - staging
        - prod
      single_network:
        description: "single for only testing one network"
        required: true
        default: "single"
        type: choice
        options:
        - single
        - multi
  workflow_call:
    inputs:
      testnet:
        description: 'choose chain environment (livenet not supported yet)'
        required: true
        default: 'testnet'
        type: string
      amount:
        description: 'The amount to be sent'
        default: 1.0
        required: false
        type: number
      environment:
        description: 'The config file to use'
        required: true
        default: 'prod' 
        type: string
      single_network:
        description: "single for only testing one network"
        required: true
        default: "single"
        type: string

jobs:
  log-the-inputs:
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "testnet: $TESTNET"
          echo "Amount: $AMOUNT"
          echo "Environment: $ENVIRONMENT"
          echo "single_network: $SINGLE_NETWORK"
        env:
          TESTNET: ${{ inputs.testnet }}
          AMOUNT: ${{ inputs.amount }}
          ENVIRONMENT: ${{ inputs.environment }}
          SINGLE_NETWORK: ${{ inputs.single_network }}
  validate:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"

      - name: "Install Node.js"
        uses: "actions/setup-node@v3"
        with:
          cache: "yarn"
          node-version: "16"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Install the dependencies"
        run: "yarn install --immutable"

      - uses: pocket-apps/action-setup-firebase@v2
        with:
          firebase-token: ${{ secrets.FIREBASE_CI_TOKEN }}

      - id: 'auth-staging'
        if: ${{ inputs.environment == 'staging' }}
        name: 'Authenticate to Google Cloud Staging'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS_STAGING }}'

      - id: 'auth-prod'
        if: ${{ inputs.environment == 'prod' }}
        name: 'Authenticate to Google Cloud Prod'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS_PROD}}'

      - name: "Validate"
        run: "yarn integration:$ENVIRONMENT"
        env:
          TESTNET: ${{ inputs.testnet }}
          AMOUNT: ${{ inputs.amount }}
          ENVIRONMENT: ${{ inputs.environment }}
          SINGLE_NETWORK: ${{ inputs.single_network }}
      - name: "Add test summary"
        run: |
          echo "## Test results" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Passed" >> $GITHUB_STEP_SUMMARY
